/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package CustomerUI;

import customer.customer;
import enterprise.enterprise;
import enterprise.enterpriseDirectory;
import java.awt.CardLayout;
import java.awt.Container;
import java.util.ArrayList;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import order.order;
import organization.organization;
import product.product;

/**
 *
 * @author kaush
 */
public class CustomerNewOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerNewOrderJPanel
     */

    JPanel CardContainer;
    customer userCustomer;
    enterpriseDirectory enterpriseList;
    enterprise selectedEnterprise = null;
    organization selectedOrganization = null;
    
    public CustomerNewOrderJPanel(JPanel CardContainer, customer userCustomer, enterpriseDirectory enterpriseList) {
        initComponents();
        this.CardContainer = CardContainer;
        this.userCustomer = userCustomer;
        this.enterpriseList = enterpriseList;
        
        populateCBEnterprise();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CBEnterprise = new javax.swing.JComboBox<>();
        CBOrganization = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        btnAddProduct = new javax.swing.JButton();
        btnViewCart = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        btnBackcourse = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 28)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Products");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 680, 45));

        tblProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Organization", "Type", "Price", "Availibility"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductList);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 273, 650, 241));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Place New Order");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 340, 55));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel5.setText("Please Enter Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 540, -1, 30));

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setText("Enterprise :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 124, -1));

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });
        add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(285, 536, 130, 40));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel3.setText("Organization :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, -1, -1));

        add(CBEnterprise, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 89, -1, -1));

        add(CBOrganization, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 150, -1, -1));

        btnSearch.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 140, 90, 40));

        btnAddProduct.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnAddProduct.setText("Add Product");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });
        add(btnAddProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 590, 120, 40));

        btnViewCart.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnViewCart.setText("View Cart");
        btnViewCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCartActionPerformed(evt);
            }
        });
        add(btnViewCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 590, 110, 40));

        btnSelect.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });
        add(btnSelect, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 90, 40));

        btnBackcourse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MainUserInterface/left-arrow (2).png"))); // NOI18N
        btnBackcourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackcourseActionPerformed(evt);
            }
        });
        add(btnBackcourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 110, 40));

        btnRefresh.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 40, 90, 40));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/OrganizationUI/main5.jpg"))); // NOI18N
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(-410, -160, 2040, 1220));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        // TODO add your handling code here:
        
        order Order = userCustomer.getCurrentOrder();

        if (Order.getOrderProductMap().keySet().size() > 0) {
        Set<product> orderProductList = Order.getOrderProductMap().keySet();
        for (product Product : orderProductList) {
        if (Product.getProductOrganization() != selectedOrganization) {
            JOptionPane.showMessageDialog(this, "You can only order from the same organization for this order");
            return;
        }
    }
}

        int selectedRowIndex = tblProductList.getSelectedRow();
        product selectedProduct = null;

        if (selectedRowIndex < 0) {
        JOptionPane.showMessageDialog(this, "Please select the product");
        return;
}

        DefaultTableModel model = (DefaultTableModel) tblProductList.getModel();
        int productID = (int) model.getValueAt(selectedRowIndex, 0);

        ArrayList<product> productList = selectedOrganization.getOrganizationProducts();

        for (product Product : productList) {
        if (Product.getProductID() == productID) {
        selectedProduct = Product;
        break;
    }
}

        try {
        // Validate and set the quantity
        int quantity = Integer.parseInt(txtQuantity.getText());
        if (quantity <= 0) {
        JOptionPane.showMessageDialog(this, "Please enter a positive number for quantity");
        return;
        }

        // Check if the quantity is greater than availability
        if (quantity > selectedProduct.getAvailibility()) {
        JOptionPane.showMessageDialog(this, "Not enough available quantity for the selected product");
        return;
    }
        Order.setOrganizationProfile(selectedOrganization);
        Order.setEnterpriseProfile(selectedEnterprise);
        Order.setCustomerProfile(userCustomer);
        Order.setStatus("New Order");

        if (Order.getOrderProductMap().containsKey(selectedProduct)) {
        JOptionPane.showMessageDialog(this, "You have already added this product");
    } else {
        Order.getOrderProductMap().put(selectedProduct, quantity);
        JOptionPane.showMessageDialog(this, "Product added to cart");
        selectedProduct.setAvailibility(selectedProduct.getAvailibility() - quantity);
    }

        populateProductTable(selectedOrganization);
        txtQuantity.setText("");
        } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Enter only numbers in quantity");
        return;
}

        
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void btnViewCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCartActionPerformed
        // TODO add your handling code here:
        
        order Order = userCustomer.getCurrentOrder();
        
        if (Order.getOrderProductMap().keySet().size() == 0 ){
            JOptionPane.showMessageDialog(this, "Please add product to cart");
            return;
        }
        
        ViewCurrentJPanel viewcurrentJPanel = new ViewCurrentJPanel(CardContainer, userCustomer);
        CardContainer.add("ViewCurrentJPanel", viewcurrentJPanel);
        CardLayout layout = (CardLayout) CardContainer.getLayout();
        layout.next(CardContainer);


    }//GEN-LAST:event_btnViewCartActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        
        Object searchBySelected = CBOrganization.getSelectedItem();
        String searchBySelectedString = searchBySelected.toString();
        
        if (searchBySelectedString.equals("Select Organization")){
            JOptionPane.showMessageDialog(this, "Please select Organization to search");
            return;
        }
        
        ArrayList<organization> OrganizationList = selectedEnterprise.getOrganizationList();
        
        for (organization Organization : OrganizationList){
            if (Organization.getName().equals(searchBySelectedString)){
                selectedOrganization = Organization;
                populateProductTable(selectedOrganization);
            }
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
        Object searchBySelected = CBEnterprise.getSelectedItem();
        String searchBySelectedString = searchBySelected.toString();
        
        if (searchBySelectedString.equals("Select Enterprise")){
            JOptionPane.showMessageDialog(this, "Please select Enterprise to search");
            return;
        }
        
        ArrayList<enterprise> EnterpriseList = enterpriseList.getEnterpriseList();
        
        for (enterprise Enterprise : EnterpriseList){
            if (Enterprise.getName().equals(searchBySelectedString)){
                selectedEnterprise = Enterprise;
                populateCBOrganization(selectedEnterprise);
            }
        }
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnBackcourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackcourseActionPerformed
        // TODO add your handling code here:
        CardContainer.remove(this);
        CardLayout layout = (CardLayout) CardContainer.getLayout();
        layout.previous(CardContainer);
    }//GEN-LAST:event_btnBackcourseActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        
        populateProductTable(selectedOrganization);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBEnterprise;
    private javax.swing.JComboBox<String> CBOrganization;
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnBackcourse;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnViewCart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProductList;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    private void populateCBEnterprise() {
        ArrayList<enterprise> EnterpriseList = enterpriseList.getEnterpriseList();
        CBEnterprise.addItem("Select Enterprise");
        for (enterprise Enterprise : EnterpriseList){
            CBEnterprise.addItem(Enterprise.getName());
        }
    }

    private void populateCBOrganization(enterprise Enterprise) {
        
        CBOrganization.removeAllItems();
        ArrayList<organization> OrganizationList = Enterprise.getOrganizationList();
        CBOrganization.addItem("Select Organization");
        for (organization Organization : OrganizationList){
            CBOrganization.addItem(Organization.getName());
        }
        
    }

    private void populateProductTable(organization selectedOrganization) {
        
        ArrayList<product> ProductList = selectedOrganization.getOrganizationProducts();
        
        DefaultTableModel model = (DefaultTableModel) tblProductList.getModel();
        model.setRowCount(0);
                
        for (product Product : ProductList){
            Object[] row = new Object[6];
            row[0] = Product.getProductID();
            row[1] = Product.getName();
            row[2] = Product.getProductOrganization().getName();
            row[3] = Product.getType();
            row[4] = Product.getPrice();
            row[5] = Product.getAvailibility();
            
            model.addRow(row);
            
        }
        
    }
}
